plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "ng.max.vams"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders.appNameSuffix = "-DBG"
            debuggable true
        }
        release {
            manifestPlaceholders.appNameSuffix = ""
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            versionNameSuffix "-DEV"
            buildConfigField "boolean", "IS_DEV", "true"
            resValue 'string', 'app_name', 'VAMS-DEV'
        }

        staging {
            dimension "default"
            applicationIdSuffix ".staging"
            versionNameSuffix "-STAGING"
            buildConfigField "String", "BASE_URL", "\"https://api.staging.max.ng/\""
            buildConfigField "boolean", "IS_DEV", "false"
            resValue 'string', 'app_name', 'VAMS-STG'
        }

        production {
            dimension "default"
            buildConfigField "String", "BASE_URL", "\"https://api.max.ng/\""
            buildConfigField "boolean", "IS_DEV", "false"
            resValue 'string', 'app_name', 'VAMS'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName = 'VAMS'
            def flavor = ''
            def buildType = ''
            def formattedDate = "-${(new Date()).format('yyyyMMdd-HHmm')}"
            def version = ''

            switch (variant.flavorName) {
                case "production":
                    flavor = '-PROD'
                    version = "-v${defaultConfig.versionName}".replaceAll("\\.", "_")
                    if (variant.buildType.name == 'debug') {
                        buildType = '-Dbg'
                    }
                    break
                case "staging":
                    flavor = '-Stg'
                    switch (variant.buildType.name) {
                        case "debug":
                            buildType = '-Dbg'
                            break
                        case "release":
                            buildType = '-Rel'
                            break
                    }
                    break
                case "dev":
                    flavor = '-Dev'
                    switch (variant.buildType.name) {
                        case "debug":
                            buildType = '-Dbg'
                            break
                        case "release":
                            buildType = '-Rel'
                            break
                    }
                    break
            }

            outputFileName = fileName + flavor + buildType + version + formattedDate + ".apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    //https://kotlinlang.org/docs/kapt.html#non-existent-type-correction
    kapt {
        correctErrorTypes true
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    implementation "androidx.activity:activity-ktx:$activity_version"
    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_lifecycle_version"
    //Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    //Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    //gson
    implementation "com.google.code.gson:gson:$gson_version"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // define a BOM and its version
    implementation "com.squareup.okhttp3:okhttp-bom:$okhttp_version"

    // define any required OkHttp artifacts without version
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor"

    // <chuck>
    // chuck release implementation
    releaseImplementation "com.readystatesoftware.chuck:library-no-op:$chuck_version"
    // chuck debug implementations
    debugImplementation "com.readystatesoftware.chuck:library:$chuck_version"
    // </chuck>

    //HILT
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // For instrumentation tests
//    androidTestImplementation  "com.google.dagger:hilt-android-testing:$hilt_version"
//    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"

    // For local unit tests
//    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
//    kaptTest "com.google.dagger:hilt-compiler:$hilt_version"

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
}